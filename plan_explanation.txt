Plan Explanation: Integrating Plan Feature with Dashboard and Statistics Pages

Overview:
The goal is to leverage the existing "Plans" feature (where users can view and assign subscription plans like Free or Premium) to control access and content visibility on the Dashboard and Statistics pages. This ensures that users with different plans see appropriate levels of data and functionality, enhancing user experience and potentially driving premium subscriptions.

Current State Analysis:
- Plans.jsx: Handles plan selection, assignment, and display of current user plan. It fetches plans from the backend and allows users to assign a plan to their account.
- Dashboard.jsx: Displays a sales summary with various KPIs (e.g., total sales, profit, top products) in a grid of StatCards and a table of top profit products. It fetches data from multiple KPI endpoints.
- Statistics.jsx: Shows detailed analytics with multiple charts (e.g., sales trends, category distribution, profit per product) using Nivo charts. It fetches data from statistics endpoints and includes a PDF download feature.
- AuthContext.jsx: Manages user authentication state, including user details like ID and email. It does not currently include plan information.

Proposed Plan:
To integrate the plan feature, we will modify the Dashboard and Statistics components to conditionally render content based on the user's current plan. This will involve:
1. Enhancing the AuthContext to fetch and store the user's current plan upon login or when navigating to protected pages.
2. Updating Dashboard.jsx to limit or hide certain stats/KPIs for free plan users (e.g., show only basic metrics like total sales and orders, hide advanced ones like profit margin or top products table).
3. Updating Statistics.jsx to restrict chart visibility for free plan users (e.g., show only 2-3 basic charts, hide advanced ones like profit per product or category performance comparison).
4. Adding visual indicators or upgrade prompts for free users to encourage plan upgrades.
5. Ensuring backend endpoints are not affected; restrictions are enforced on the frontend for simplicity.

Detailed Steps:
1. Update AuthContext.jsx:
   - Add a 'currentPlan' state and a function to fetch the user's current plan using the existing getUserCurrentPlan API.
   - Fetch the plan when the user logs in or when the context initializes for authenticated users.
   - Provide the currentPlan in the context value so components can access it.

2. Modify Dashboard.jsx:
   - Import and use the currentPlan from AuthContext.
   - Conditionally filter the statItems array: For free plan, show only a subset (e.g., total sales, total orders, average rating); for premium, show all.
   - Conditionally render the products table: Hide it for free plan users or show a limited version (e.g., top 3 instead of 5).
   - Add a banner or message for free users prompting them to upgrade for full access.

3. Modify Statistics.jsx:
   - Import and use the currentPlan from AuthContext.
   - Conditionally render chart cards: For free plan, show only basic charts (e.g., Monthly Sales & Profit Trend, Daily Sales Count, Category Distribution); hide others like Profit per Product or Top 5 Selling Products.
   - Disable or hide the PDF download button for free users, or limit the content in the PDF.
   - Add upgrade prompts in the page header for free users.

4. Update SidebarLayout.jsx or routing:
   - Ensure that navigation to Dashboard and Statistics is allowed for all plans, but content is restricted as above.
   - Optionally, add a plan status indicator in the sidebar.

5. Testing and Validation:
   - Test with users on free and premium plans to ensure correct rendering.
   - Verify that backend data fetching works regardless of plan (no changes needed there).
   - Check responsiveness and UI consistency.

Benefits:
- Encourages premium subscriptions by showcasing value.
- Maintains a clean, tiered user experience.
- Minimal backend changes; mostly frontend logic.

Potential Risks:
- Users might find restrictions frustrating; ensure clear messaging.
- If plan data is not fetched correctly, default to free plan restrictions.

Next Steps:
- Implement the AuthContext updates first.
- Then update Dashboard and Statistics components.
- Test thoroughly and iterate based on feedback.
